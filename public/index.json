[{"content":"Here you can find Presslabs Stack's documentation, the first open-source serverless hosting platform that bridges two major technologies: WordPress and Kubernetes.","date":-62135596800,"description":"Here you can find Presslabs Stack's documentation, the first open-source serverless hosting platform that bridges two major technologies: WordPress and Kubernetes.","lastmod":-62135596800,"lvl0":"Stack Docs","lvl1":"Welcome to Stack Docs!","objectID":"3976528693a0108357f4928017600865","permalink":"http://0.0.0.0:8000/","text":"Welcome to Stack Docs! Here you can find Presslabs Stack\u0026#39;s documentation, the first open-source serverless hosting platform that bridges two major technologies: WordPress and Kubernetes.","title":"Welcome to Stack Docs!","url":"/"},{"content":"Stack is a collection of Kubernetes operators that are used to manage and operate WordPress on top of Kubernetes. Those operators are cloud agnostic, meaning that Stack can run on any Kubernetes cluster.","date":-62135596800,"description":"Stack is a collection of Kubernetes operators that are used to manage and operate WordPress on top of Kubernetes. Those operators are cloud agnostic, meaning that Stack can run on any Kubernetes cluster.","lastmod":-62135596800,"lvl0":"About Stack","lvl1":"About Stack","objectID":"8ba5d895f1213ced374839c63e04054f","permalink":"http://0.0.0.0:8000/about-stack/","text":"The Presslabs Stack is an open-source project on Github.\nAll the components of Stack can be viewed in the picture below:\nIt has a control plane made up of:\n WordPress Operator - manages WordPress related operations. From installation and autoscaling, to cronjobs, backups, and upgrades. MySQL Operator - takes care of all the database operations, from scaling and failovers to backups. Depending on your use-case, you can have one cluster per site or one cluster for multiple sites. Let\u0026#39;s Encrypt Cert Manager - takes care of automatically generating TLS certifications and accommodate their renewal NGINX Operator - manages all the NGINX instances that are user-facing  Going further, the data plane represents the actual pods running and its underlying storage. We recommend starting with presslabs/stack-wordpress, but we\u0026#39;ll get further into the Runtime a little bit later, since it\u0026#39;s tight with deployment.\nA system like Stack, with a lot of moving pieces, needs a monitoring system. We chose Prometheus for metrics storage (managed by the Prometheus operator) and Grafana for visualizations and alerting.\n","title":"About Stack","url":"/about-stack/"},{"content":"Dive into the concepts of a WordPress site running on Stack for a better understanding of how your site should look.","date":-62135596800,"description":"Dive into the concepts of a WordPress site running on Stack for a better understanding of how your site should look.","lastmod":-62135596800,"lvl0":"Concepts","lvl1":"Concepts","objectID":"b1fe9fd239cd9b313fc3b542f4facf06","permalink":"http://0.0.0.0:8000/concepts/","text":" title: Concepts linktitle: Concepts description: \u0026amp;ldquo;Dive into the concepts of a WordPress site running on Stack for a better understanding of how your site should look.\u0026amp;rdquo; keywords: [concepts]","title":"Concepts","url":"/concepts/"},{"content":"There are multiple parts that make a site running on Kubernetes via Stack, and we'll take them one by one below.","date":-62135596800,"description":"There are multiple parts that make a site running on Kubernetes via Stack, and we'll take them one by one below.","lastmod":-62135596800,"lvl0":"Running WordPress on Kubernetes","lvl1":"Running WordPress on Kubernetes","objectID":"9a9320115267b2c7812c8458b6b2514a","permalink":"http://0.0.0.0:8000/concepts/running-wordpress-on-kubernetes/","text":"A good reference about how a WordPress site looks on Stack is the WordPress Spec.\nDomains Each site needs to have at least one domain. When a request comes to the NGINX Ingress, it\u0026#39;ll get routed to the appropriate pods, based on the Host header.\nEven if you can have multiple domains answering to the same site, you still need the main domain that will be responsible for the WP_HOME and WP_SITEURL constants.\nThose domains are syncing in the ingress controller. Also, cert-manager will bundle those domains into one single certificate.\nMedia files Uploads are hard to manage in WordPress because they tend to get big and use a lot of computation power to generate different size. We found that we can scale them by using buckets (Google Cloud Storage / S3 etc). You also can use other traditional ways of storing and serving media files, via persistent volume claims, hostPath or simple emptyDir.\nBuckets For now, we support only GCS, but contributions are welcome in order to extend support for S3 as well. Handling media can be split into two main parts: writing and reading. All of them include some sort of optimizations, in order to increase performance or to allow for better testing.\nIn all situations, we\u0026#39;ll need some sort of authorization. On GCS this is achieved by using a Google Service Account.\nUpload a file File uploads to object storage services are handled by stack-mu-plugin. Write access to media is implemented trough a PHP stream wrapper which allows basic operations like fopen and file_get_contents but lacks support for some features, like directory traversals.\nTo get access to the the media bucket you need to call wp_get_upload_dir() or wp_upload_dir() as direct writes to wp-content/uploads folder are ephemeral and are lost when you stop the container.\nRead a file The NGINX provided by the base quay.io/presslabs/wordpress-runtime allows out-of-the-box integration for serving files from media buckets. This is convenient, but if you create your custom docker image from scratch you\u0026#39;ll probably want to deal with media serving on your own.\n","title":"Running WordPress on Kubernetes","url":"/concepts/running-wordpress-on-kubernetes/"},{"content":"How to contribute to Stack","date":-62135596800,"description":"How to contribute to Stack","lastmod":-62135596800,"lvl0":"Contributing","lvl1":"Contributing","objectID":"cc4aac3e9be04e0413c9520f223b493c","permalink":"http://0.0.0.0:8000/contributing/","text":"Issues Issues are being tracked at https://github.com/presslabs/stack/issues.\nThey can range from bug reports to questions about development, installation process and other stuff related to the project.\nDevelopment  NOTE Before making a change to this repository, please open an issue to discuss why the change is needed, and how it should be implemented if necessary.\n   Clone the repository:\nOptionally you could fork the repo first.\ngit clone https://github.com/presslabs/stack.git \u0026amp;amp;\u0026amp;amp; cd stack\n  Install dependencies:\nmake dependencies\n  Implement your changes. Remember to lint your code with make lint.\n  Deploy to your cluster with skaffold:\nIf you want to develop locally, use minikube to get a locally running cluster. You can follow the steps described here, except for the ones explaining how to install the stack.\nIf you want to have your changes constantly deployed run:\nskaffold dev\nIf you want to manually deploy your changes run:\nskaffold run\n  Test your changes.\nThere\u0026#39;s not much written code in stack, except for a few components (default-backend, git-webhook\u0026amp;hellip;) which might have their own Makefile and tests that can be run with make test.\nSo most of the times testing will mean just running the stack with your changes and poking around.\nIf you need to run a site for your use-case, read the related documentation.\n  Open a pull request at https://github.com/presslabs/stack/compare. We\u0026#39;ll review the pull request and assist you on getting it merged.\n  ","title":"Contributing","url":"/contributing/"},{"content":"Detailed guides about local site development, how to deploy a WordPress site on Stack and also how to import an existing site.","date":-62135596800,"description":"Detailed guides about local site development, how to deploy a WordPress site on Stack and also how to import an existing site.","lastmod":-62135596800,"lvl0":"How-to guides","lvl1":"How-to guides","objectID":"fe7edce3160842db12bce4cc76acbec2","permalink":"http://0.0.0.0:8000/how-to/","text":" title: How-to guides linktitle: How-to guides description: \u0026amp;ldquo;Detailed guides about local site development, how to deploy a WordPress site on Stack and also how to import an existing site.\u0026amp;rdquo; keywords: [how-to]","title":"How-to guides","url":"/how-to/"},{"content":"Find out how to deploy your WordPress code to the Presslabs Stack.","date":-62135596800,"description":"Find out how to deploy your WordPress code to the Presslabs Stack.","lastmod":-62135596800,"lvl0":"Deploy to Stack","lvl1":"Deploy WordPress to Presslabs Stack","objectID":"e4d236e82a272d26f1adb9b7ceb399e7","permalink":"http://0.0.0.0:8000/how-to/deploy-wordpress-on-stack/","text":"Requirements  helm  Getting started Deploying a site is as simple as following these three steps:\n  Add the Presslabs helm chart repository\n  Deploy a site, with main domain pointing to example.com\n  Point the domain to the ingress IP\n  Deploy a site from a git repository  NOTE Deploying from git repository requires that your WP_CONTENT_DIR is checked in. If you want to use Bedrock it is highly recommended that you deploy using a docker image.\n Deploying from git is as simple as:\n code.git.repository is a valid git repository origin. It supports HTTP, HTTPS, GIT and the SSH protocol. code.git.reference reference to deploy. It can be a commit, branch or tag and defaults to master  Using a private repository In order to use a private repository, you must generate a SSH key pair and set the private to the deployment. To do that, you need to add --set-file code.git.ssh_private_key=PATH_TO_THE_PRIVATE_KEY:\nDeploy a custom Docker image You can run a custom image, bundled with your own code and dependencies. You can specify it when deploying by setting image.repository and image.tag.\nWhat\u0026#39;s next?  How to import a site Check helm chart values reference  ","title":"Deploy WordPress to Presslabs Stack","url":"/how-to/deploy-wordpress-on-stack/"},{"content":"Detailed guides about local site development, how to deploy a WordPress site on Stack and also how to import an existing site.","date":-62135596800,"description":"Detailed guides about local site development, how to deploy a WordPress site on Stack and also how to import an existing site.","lastmod":-62135596800,"lvl0":"Development","lvl1":"Development","objectID":"3a6cfa20a0a6634c02f8cafa2abf8f54","permalink":"http://0.0.0.0:8000/how-to/development/","text":" title: Development linktitle: Development description: \u0026amp;ldquo;Detailed guides about local site development, how to deploy a WordPress site on Stack and also how to import an existing site.\u0026amp;rdquo; keywords: [how-to]","title":"Development","url":"/how-to/development/"},{"content":"This how-to will guide you through creating a Bedrock WordPress project, containerising it and running it locally using docker compose.","date":-62135596800,"description":"This how-to will guide you through creating a Bedrock WordPress project, containerising it and running it locally using docker compose.","lastmod":-62135596800,"lvl0":"Using Bedrock","lvl1":"Local development with Bedrock","objectID":"febbc95fbeab9f45530d8e3703c651f2","permalink":"http://0.0.0.0:8000/how-to/development/local-development-with-bedrock/","text":"Why starting with Bedrock? roots/bedrock offers a standard structure and allows you to work with composer, thus providing better dependency management and enabling some software engineering good practices. You can install/uninstall plugins and themes via composer, use it\u0026#39;s autoload functionality and other goodies.\nRequirements  composer docker-compose  Bootstrap the project First let\u0026#39;s create a project via composer starting from roots/bedrock.\nThen we need to install the Presslabs Stack must-use plugin for WordPress.\nIn order to use the external object cache, we need to place it into our WP_CONTENT_DIR/object-cache.php.\nCreate the Dockerfile Presslabs Stack provides a base image for building and developing WordPress sites using Bedrock. quay.io/presslabs/wordpress-runtime:bedrock-build is used as a builder image and is optimized for build speed. quay.io/presslabs/wordpress-runtime:bedrock it\u0026#39;s optimized for running Bedrock enabled sites.\nThe Dockerfile is as simple as:\nRun using docker-compose This docker-compose.yaml is a good starting point for local development using docker.\nTo boot up WordPress and MySQL server run:\nInstalling a plugin (optional) To install a plugin you can just:\nThis site should be available at http://localhost:8080.\nWhat\u0026#39;s next  Deploy WordPress on Stack Customize NGINX An example project can be found at github.com/presslabs/stack-example-bedrock  VIDEO Tutorial: Create a Bedrock WordPress project ","title":"Local development with Bedrock","url":"/how-to/development/local-development-with-bedrock/"},{"content":"This how-to will guide you trough creating a classic WordPress project, containerising it and running it locally using docker compose","date":-62135596800,"description":"This how-to will guide you trough creating a classic WordPress project, containerising it and running it locally using docker compose","lastmod":-62135596800,"lvl0":"Local development","lvl1":"Local development","objectID":"42e856196b133a92c9c8ca4963b982d7","permalink":"http://0.0.0.0:8000/how-to/development/local-development/","text":"Requirements  wp-cli docker-compose  Bootstrap the project First let\u0026#39;s create a project via wp-cli.\nThen we need to install the Presslabs Stack must use plugin for WordPress from GitHub.\nIn order to enable the external object cache, we need to place it into our WP_CONTENT_DIR/object-cache.php.\nCreate the Dockerfile Presslabs Stack provides a base image for building and developing WordPress sites. quay.io/presslabs/wordpress-runtime is used as a builder and runtime image.\nThe Dockerfile is as simple as:\nRun using docker-compose This docker-compose.yaml is a good starting point for local development using docker.\nTo boot up WordPress and MySQL server run:\nThis site should be available at http://localhost:8080.\nInstalling a plugin (optional) To install a plugin you can just:\nWhat\u0026#39;s next  Deploy WordPress on Stack Customize NGINX An example project can be found at github.com/presslabs/stack-example-wordpress  VIDEO Tutorial: Create a WordPress project with Docker Compose ","title":"Local development","url":"/how-to/development/local-development/"},{"content":"Find out how to import database and media files into your Presslabs Stack site.","date":-62135596800,"description":"Find out how to import database and media files into your Presslabs Stack site.","lastmod":-62135596800,"lvl0":"Import data","lvl1":"Import data into a site running on Stack","objectID":"993197fe9298facd65d615af53a5917d","permalink":"http://0.0.0.0:8000/how-to/import-site/","text":"Database import In order to import the database, you\u0026#39;ll need to port-forward MySQL\u0026#39;s port.\nFurthermore, you\u0026#39;ll need to connect to it via a user and password. All database related credentials are stored in the \u0026amp;lt;release\u0026amp;gt;-db secret.\nYou\u0026#39;ll need the USER and PASSWORD secret. Those are base64 encoded and in order to decode them you can echo \u0026amp;lt;USER-CONTENT\u0026amp;gt; | base64 -D. Since you have the credentials and the port forwarded, you just have to connect using your favorite client.\nUploads import We recommend using buckets to handle media files and in order to import all those media files, we recommend using rclone. You\u0026#39;ll just need to config your service account and you\u0026#39;re ready to go.\n WARNING This will delete existing files under that google cloud storage folder.\n ","title":"Import data into a site running on Stack","url":"/how-to/import-site/"},{"content":"Quickstart guides to walk you through creating the necessary clusters and installing the Presslabs Stack on them.","date":-62135596800,"description":"Quickstart guides to walk you through creating the necessary clusters and installing the Presslabs Stack on them.","lastmod":-62135596800,"lvl0":"Quickstart","lvl1":"Quickstart","objectID":"0926a6a77f0a616ae10cfba882e9766a","permalink":"http://0.0.0.0:8000/quickstarts/","text":" title: Quickstart linktitle: Quickstart description: \u0026amp;ldquo;Quickstart guides to walk you through creating the necessary clusters and installing the Presslabs Stack on them.\u0026amp;rdquo; keywords: [quickstarts]","title":"Quickstart","url":"/quickstarts/"},{"content":"Right now, Google Kubernetes Engine (GKE) is the most tested Kubernetes environment for Stack.","date":-62135596800,"description":"Right now, Google Kubernetes Engine (GKE) is the most tested Kubernetes environment for Stack.","lastmod":-62135596800,"lvl0":"Install on GKE","lvl1":"How to install Stack on Google Kubernetes Engine","objectID":"e93829ceddaac40209366a5f5c345cc9","permalink":"http://0.0.0.0:8000/quickstarts/install-stack-on-gke/","text":"Cluster description  WARNING Keep in mind that for now, Kubernetes 1.13.6 and 1.14.2 are not supported because of https://github.com/presslabs/stack/issues/23.\n If you want to move quickly, you can use the predefined terraform scripts from terraform.\nThese scripts allow you to create a new cluster with 4 node pools, pre-configured with the labels and taints:\n system, used by the control plane to host all operators pods. Those nodes don\u0026#39;t need heavy resources. database, MySQL related nodes. You can tweak the MySQL performance by using nodes with faster IO and maybe bigger memory for the query cache, depending on the use-case. wordpress is used to host pods that run the PHP code with helper containers for serving media files via buckets. wordpress-preemptible is the same as the wordpress pool, but it has the cloud.google.com/gke-preemptible taint. Because of that, you can use preemptible machines for development sites, lowering the entire costs of the cluster.  In order to continue with terraform, you\u0026#39;ll need some prerequisites:\n terraform \u0026amp;gt;= v0.12.1 gcloud kubectl  Moving forward, let\u0026#39;s clone the repository:\nIn stack/, you\u0026#39;ll find a directory called terraform which contains some terraform modules and some examples. It\u0026#39;s highly recommended to check the modules yourself, but here is a summary:\n in order to create a cluster, you\u0026#39;ll need to specify a name, region, and at least a zone. the initial node count is going to be 1 and the cluster will have the Horizontal Pod Autoscaler add-on enabled  Node pools details system node pool The system node pool is going to have the initial node count set to 1, but it has autoscaling active, with a minimum node count of 1 to a maxim of 3 nodes. It spawns nodes with 50Gb storage and \u0026amp;ldquo;COS\u0026amp;rdquo; images (Container-Optimized OS from Google). Those nodes can be configured as preemptible, if the preemptible variable is set to true. As labels, it sets only one called node-role.kubernetes.io/presslabs-sys. One interesting part about this node pool is that it has a taint called CriticalAddonsOnly. You can read more about taints and toleration here. It\u0026#39;s advised to have non-preemptible machines for this node-pool in production, but it doesn\u0026#39;t require having resource heavy machines.\ndatabase node pool Next one is the database node pool. Is similar to the system node pool, the only differences are in initial node count, which is 0, and labels which are node-role.kubernetes.io/database, node-role.kubernetes.io/mysql and node-role.kubernetes.io/memcached. As you can see, the Memcached instance is close to the database, but this can be updated.\nwordpress node pool This node pool is used to run the WordPress. You may want to have CPU intensive machines here since php-fpm doesn\u0026#39;t have an async way to run your code and its processing one request per worker. The recommended amount of workers per CPU core is 8, but you can play with it, depending on your use-case.\nwordpress-preemtible node pool In order to cut your costs, you may want to create sites on preemptible machines. They are short-lived instances, 80% cheaper than normal VMs, but they don\u0026#39;t have a guaranteed lifespan (Google may need them if their workload is high or if they are up for more than 24h). This node pool is suitable for development or low-traffic instances.\nCreate a new cluster In order to create a new cluster, first, you\u0026#39;ll need to authorize yourself, via gcloud cli.\nWe\u0026#39;ll then need to initialize terraform\u0026#39;s modules and install google-beta plugin.\nNext, create a new values file. Let\u0026#39;s call it cluster.tfvars.\nYou can see a list with all variables you can update in main.tf\nNext, just apply the configuration you set:\nTo be able to interact with kubernetes, you need to get the permission:\nNow that the cluster is up and running, you\u0026#39;ll need to install helm tiller and the Presslabs Stack. For that, Stack offers some bash scripts that are located under the demo directory, 01-install-helm.sh and 02-install-presslabs-stack.sh.\nInstall helm tiller The 01-install-helm.sh bash script creates a tiller service account, it binds the cluster-admin role to it and is initialising the tiller, it contains the following commands:\nInstall the Presslabs Stack The 02-install-presslabs-stack.sh bash script is actually going to install the Stack, via helm. We\u0026#39;ll take all the commands from this script one by one.\nFirst, we\u0026#39;ll need a presslabs-stack namespace:\nFor that namespace, we\u0026#39;ll need to disable validation, in order to allow cert-manager to do its job:\nNext, add the Presslabs\u0026#39;s charts repository to your helm sources:\nAlso before before installing the stack using helm we need to install the CRDs that are used by this deployment:\nIn the end, you can just install presslabs/stack chart with some preset values from gke.yaml.\nThe preset values will request basic resources for each component: 256Mi RAM and 100m CPU.\nThat\u0026#39;s pretty much it! You have Stack up and running on your cluster!\nEnable Let\u0026#39;s Encrypt By default, Stack comes with self-signed issuer enabled. If you want to configure letsencrypt issues, you\u0026#39;ll need to run the following command\nVIDEO Tutorial: How to install Stack on GKE ","title":"How to install Stack on Google Kubernetes Engine","url":"/quickstarts/install-stack-on-gke/"},{"content":"Installing Stack on Minikube is no different then installing it on another Kubernetes cluster.","date":-62135596800,"description":"Installing Stack on Minikube is no different then installing it on another Kubernetes cluster.","lastmod":-62135596800,"lvl0":"Install on Minikube","lvl1":"How to install Stack on Minikube","objectID":"f76384e5ab351deae4f867df805eeb3c","permalink":"http://0.0.0.0:8000/quickstarts/install-stack-on-minikube/","text":"We recommend to start Minikube with a little bit more resources:\nNext, you\u0026#39;ll need to install helm.\nAfter that, we\u0026#39;re ready to install Stack.\nVIDEO Tutorial: How to install Stack on Minikube ","title":"How to install Stack on Minikube","url":"/quickstarts/install-stack-on-minikube/"},{"content":"The go-to place for setting up your Runtime environment variables and Helm Chart values for running a WordPress one.","date":-62135596800,"description":"The go-to place for setting up your Runtime environment variables and Helm Chart values for running a WordPress one.","lastmod":-62135596800,"lvl0":"Reference","lvl1":"Reference","objectID":"acd39d1787e18fae8c246aa195338a42","permalink":"http://0.0.0.0:8000/reference/","text":" title: Reference linktitle: Reference description: \u0026amp;ldquo;The go-to place for setting up your Runtime environment variables and Helm Chart values for running a WordPress one.\u0026amp;rdquo; keywords: [reference]","title":"Reference","url":"/reference/"},{"content":"Sites on Stack run in docker images. This describes the reference environment that docker images should implement in order to integrate with Stack.","date":-62135596800,"description":"Sites on Stack run in docker images. This describes the reference environment that docker images should implement in order to integrate with Stack.","lastmod":-62135596800,"lvl0":"Runtime environment","lvl1":"Stack runtime environment","objectID":"1ddd490317e18ce1109baaec5840b250","permalink":"http://0.0.0.0:8000/reference/runtime-environment/","text":"HTTP server  PORT (default to 8080) - the port your app MAX_BODY_SIZE (default to 10) - the size in megabytes for the maximum client request body size. (this controls NGINX client_max_body_size and php upload_max_filesize and post_max_size) NGINX_ACCESS_LOG (default to off) - where to write NGINX\u0026#39;s access log NGINX_ERROR_LOG (default to /dev/stderr) - where to write NGINX\u0026#39;s error log  Media Library  STACK_MEDIA_PATH (default to /wp-content/uploads) STACK_MEDIA_BUCKET - if set serves the STACK_MEDIA_PATH from this media bucket (eg. gs://my-google-cloud-storage-bucket/prefix or s3://my-aws-s3-bucket)  PHP runtime  PHP_MEMORY_LIMIT (default to 128). PHP request memory limit in megabytes PHP_REQUEST_TIMEOUT (default to 30) - Time in seconds for serving a single request. PHP max_execution_time is set to this value and can only be set to a lower value. If set to a higher one, the request will still be killed after this timeout. PHP_MAX_CHILDREN (default to 5) PHP_MAX_REQUESTS (default to 500) PHP_MAX_SPARE_SERVERS (default to PHP_MAX_CHILDREN / 2 + 1) PHP_MIN_SPARE_SERVERS (default to PHP_MAX_CHILDREN / 3) PHP_START_SERVERS (default to (PHP_MAX_SPARE_SERVERS - PHP_MIN_SPARE_SERVERS) / 2 + PHP_MIN_SPARE_SERVERS) PHP_PROCESS_IDLE_TIMEOUT (default to 10) - time in seconds to wait until killing an idle worker (used only when PHP_PM is set to ondemand) PHP_SLOW_REQUEST_TIMEOUT (default to 0) - Time in seconds after which a request is logged as slow. Set to 0 to disable slow logging.  SMTP settings  SMTP_HOST (default to localhost) SMTP_USER SMTP_PASS SMTP_PORT (default to 587) SMTP_TLS (default to yes) ","title":"Stack runtime environment","url":"/reference/runtime-environment/"},{"content":"This describes the reference values file for running a WordPress site.","date":-62135596800,"description":"This describes the reference values file for running a WordPress site.","lastmod":-62135596800,"lvl0":"Helm chart values","lvl1":"WordPress site helm chart values","objectID":"66e499e5f06ef03c6ab9bfbd5431b359","permalink":"http://0.0.0.0:8000/reference/wordpress-site-helm-chart-values/","text":"Helm chart values","title":"WordPress site helm chart values","url":"/reference/wordpress-site-helm-chart-values/"}]